// Problem Description
// Given a binary tree, return the Postorder traversal of its nodes values.

// Problem Constraints
// 1 <= number of nodes <= 105

// Input Format
// First and only argument is root node of the binary tree, A.

// Output Format
// Return an integer array denoting the Postorder traversal of the given binary tree.

// Example Input
// Input 1:

//    1
//     \
//      2
//     /
//    3
// Input 2:

//    1
//   / \
//  6   2
//     /
//    3

// Example Output
// Output 1:

//  [3, 2, 1]
// Output 2:

//  [6, 3, 2, 1]

import BinarySearchTree from './BST.js';

const bst = new BinarySearchTree();
const nodes = [6, 9, 4, -1, -1, 8, -1, -1, 3, -1, -1];
// const nodes = [
//   166, 414, 260, 256, 289, 403, 567, 337, 146, 281, 51, -1, 42, 35, 561, 137,
//   12, 348, 468, 19, 242, 52, 113, 487, -1, 428, 175, 118, 3, 13, 535, 259, 437,
//   563, 389, 500, -1, 38, 8, 207, 221, 265, 238, 205, 136, -1, -1, 89, 105, 145,
//   527, -1, 78, 225, 296, 286, 494, 47, 385, 558, 380, 488, 62, -1, 148, 198,
//   484, -1, -1, 98, 165, -1, 174, 45, -1, -1, 333, 80, 287, -1, 21, 520, 239,
//   294, 464, 95, 24, 435, 72, 463, -1, 134, 450, -1, -1, 97, -1, 291, 345, 445,
//   30, 550, 537, 413, -1, 379, 185, 279, 276, 109, 224, 201, -1, 58, 410, -1, -1,
//   -1, -1, 309, -1, 39, 442, 497, 2, -1, -1, -1, -1, 315, -1, 231, 28, 7, 424,
//   401, -1, -1, -1, 549, 480, -1, 556, 85, -1, 369, 361, 475, 111, 390, 305, 321,
//   507, -1, 493, -1, 64, 16, 135, 167, -1, 444, 318, 150, -1, 179, 350, 212, 529,
//   176, 261, 504, -1, -1, -1, 384, -1, 297, 124, -1, -1, 275, 271, 202, -1, 509,
//   439, -1, -1, 443, 499, -1, -1, -1, -1, 359, 448, 293, 466, 438, 180, 447, -1,
//   157, 323, 67, 243, 478, 555, -1, 22, -1, 160, -1, -1, 530, 420, -1, 560, 247,
//   233, -1, 409, 142, -1, -1, -1, 50, 262, 96, 37, 88, 184, 329, 382, 5, 27, 31,
//   43, -1, -1, -1, -1, -1, 104, 15, 479, -1, -1, 533, 108, 216, 193, -1, 268,
//   188, 431, 299, 546, -1, -1, 274, 395, 458, 11, 139, -1, 517, -1, -1, 474, 177,
//   483, 194, 473, 393, 112, 441, 140, 523, -1, -1, 524, 460, 302, -1, 23, -1,
//   521, 235, 63, 6, 232, 356, 552, -1, 214, 404, 376, 426, 308, -1, -1, -1, 332,
//   -1, -1, -1, -1, -1, -1, -1, -1, 54, 457, -1, -1, -1, -1, 391, 282, 161, 394,
//   406, 486, 141, 554, -1, -1, 237, 56, -1, 553, 502, 342, 273, 417, -1, -1, 462,
//   336, 526, 392, 325, 208, 158, 311, 152, 181, 534, 387, 277, 240, -1, 485, 48,
//   351, -1, -1, -1, -1, 223, 187, -1, -1, 195, 423, -1, -1, -1, -1, -1, -1, 557,
//   440, 446, -1, 365, 518, 66, 172, -1, 378, 200, 228, -1, 90, -1, 163, -1, -1,
//   -1, -1, -1, -1, 46, 117, 449, 26, 399, 255, 126, 566, -1, 358, -1, -1, -1, -1,
//   397, 83, -1, -1, -1, 283, -1, -1, 452, -1, -1, 344, -1, -1, -1, 322, 263, 383,
//   290, -1, 70, -1, 419, 218, -1, -1, 418, -1, -1, 132, -1, -1, 222, 386, -1,
//   149, -1, -1, -1, -1, -1, 230, 71, 203, 541, 61, 57, 374, 213, 388, 467, 41,
//   87, 236, -1, 120, -1, -1, 173, -1, 301, -1, 508, -1, 25, 405, -1, 341, 164,
//   421, 416, 482, -1, 81, -1, -1, -1, -1, -1, -1, 258, 246, 93, 429, 327, 513,
//   316, 432, 121, -1, -1, -1, 116, 522, 559, 73, -1, -1, -1, -1, -1, 257, -1,
//   491, -1, 324, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, 528, -1, -1, -1,
//   349, -1, -1, 495, 76, 125, 254, -1, 312, 245, -1, 40, 168, 159, 138, 408, 162,
//   505, 425, 503, 169, 55, 471, -1, -1, -1, -1, -1, -1, 562, 288, 86, -1, -1, -1,
//   -1, -1, 79, 186, -1, -1, -1, -1, -1, -1, 272, 540, -1, -1, -1, 94, -1, -1, 99,
//   -1, 244, -1, -1, 170, -1, 510, -1, -1, -1, -1, -1, -1, 267, -1, -1, -1, -1,
//   -1, -1, 407, 531, 74, -1, 434, 264, 330, 215, -1, -1, 353, -1, 515, 106, -1,
//   310, -1, 519, 368, 49, -1, -1, -1, -1, 280, -1, -1, -1, 525, 306, -1, 219, -1,
//   -1, -1, -1, -1, -1, -1, -1, 248, -1, 192, 156, 133, 147, 430, -1, 34, -1, -1,
//   204, 300, 381, 84, 412, 340, 130, -1, 551, -1, -1, 206, 498, 366, 331, -1,
//   266, 459, 123, 326, 122, 270, -1, -1, 68, 251, -1, 115, 506, -1, -1, -1, -1,
//   -1, 422, -1, -1, -1, -1, 339, 539, -1, -1, -1, -1, 209, 372, 511, 347, -1,
//   455, 77, 544, -1, -1, -1, 328, -1, -1, -1, -1, 131, -1, 226, -1, -1, -1, -1,
//   -1, -1, 363, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1,
//   -1, -1, -1, -1, 364, -1, -1, -1, -1, 211, -1, -1, -1, 461, 252, -1, 227, -1,
//   -1, 199, -1, 334, 234, -1, -1, -1, 33, -1, -1, 514, 197, 220, 314, 60, 241,
//   -1, -1, 119, 470, 436, -1, -1, -1, 91, -1, -1, -1, 128, 32, -1, 538, 129, -1,
//   -1, -1, -1, -1, 284, 398, 151, 542, 20, 477, -1, -1, 469, -1, -1, -1, 101, -1,
//   17, 196, -1, 191, -1, 303, 210, -1, 371, 253, 82, -1, -1, 171, 317, -1, 532,
//   -1, -1, 453, -1, 451, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 320, 229, -1,
//   298, -1, -1, -1, -1, 492, -1, -1, 92, -1, -1, 114, -1, -1, 360, -1, -1, 465,
//   433, -1, -1, -1, -1, 352, -1, -1, -1, -1, 127, -1, 355, 373, -1, 36, 472, -1,
//   -1, -1, 456, -1, -1, 10, -1, -1, -1, 516, -1, -1, -1, -1, -1, 182, -1, -1,
//   100, 481, 370, 396, 564, -1, -1, 313, -1, -1, -1, -1, 545, -1, -1, 69, -1, -1,
//   -1, 189, -1, -1, -1, -1, 512, -1, 400, -1, -1, -1, -1, -1, -1, -1, 53, -1,
//   343, -1, -1, 346, 411, -1, 190, 18, 307, -1, 4, -1, 543, 565, -1, -1, -1, -1,
//   103, -1, 501, -1, 59, -1, -1, -1, 29, -1, 9, -1, -1, -1, -1, 44, -1, -1, 335,
//   -1, -1, -1, -1, 278, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
//   217, 144, -1, -1, -1, -1, 1, -1, -1, -1, 155, -1, -1, -1, -1, -1, 110, -1, -1,
//   496, -1, -1, 536, -1, 402, 338, -1, 547, 357, -1, -1, -1, -1, 107, -1, -1,
//   269, -1, -1, 75, -1, -1, -1, -1, -1, 183, -1, -1, -1, -1, -1, 454, -1, -1, -1,
//   -1, -1, -1, -1, 362, -1, -1, -1, -1, -1, -1, 143, -1, 178, -1, -1, -1, 367,
//   102, 490, -1, -1, -1, 377, 375, 285, -1, 249, 489, 476, -1, -1, -1, -1, -1,
//   -1, -1, -1, -1, -1, -1, -1, 548, -1, -1, 304, 154, -1, -1, 354, -1, 427, 153,
//   -1, 295, -1, -1, -1, -1, -1, -1, -1, 250, -1, -1, -1, -1, -1, -1, 415, -1, -1,
//   -1, 319, -1, -1, -1, -1, -1, 292, -1, -1, -1, -1, -1, -1, -1,
// ];

for (const value of nodes) {
  if (value !== -1) {
    bst.insert(value);
  }
}

const postorderTraversal = (A) => {
  let head = A;
  const stack = [],
    ans = [];
  while (head || stack.length > 0) {
    while (head) {
      stack.push(head);
      head = head.left;
    }
    let temp = stack[stack.length - 1].right;
    if (temp === null) {
      temp = stack.pop();
      ans.push(temp.value);
      while (stack.length > 0 && temp === stack[stack.length - 1].right) {
        temp = stack.pop();
        ans.push(temp.value);
      }
    } else {
      head = temp;
    }
  }
  return ans;
};

console.log(postorderTraversal(bst.root));

// 251 65 557 440 188 115 506 528 446 431 179 365 349 518 299 495 66 320 422 76 125 172 546 350 445 212 254 378
// 274 29 229 339 9 298 539 312 245 200 40 228 395 529 30 286 209 492 372 168 511 548 362 44 92 347 159 90 458 114
// 455 138 77 335 360 544 408 163 11 176 139 261 550 517 504 537 494 13 413 47 474 384 379 162 465 328 505 46 425
// 503 117 177 278 433 131 169 226 55 449 471 26 483 297 399 255 194 562 126 352 363 288 86 566 473 124 185 385 535
// 137 279 358 393 112 275 441 397 79 83 140 271 276 558 523 202 109 186 283 524 509 460 452 302 439 224 380 259
// 201 488 344 23 443 521 499 58 410 62 437 12 337 148 563 198 309 484 389 348 500 468 146 256 272 322 235 540 263
// 383 63 359 14 94 290 6 99 70 232 448 39 244 419 218 356 552 293 170 418 214 466 442 98 364 510 132 404 376 438
// 222 386 426 267 149 308 180 497 447 2 165 38 174 8 19 45 207 332 157 323 315 333 221 242 281 67 243 231 478 54
// 230 457 555 28 80 22 7 160 424 287 265 401 21 238 52 520 71 203 391 407 127 211 531 541 74 61 282 530 355 373 461 36 252 434 472 227 264 57 330 199 215 374 161 213 456 334 217 143 144 10 234 353 388 394 420 549 515 33 106 467 310 41 406 516 514 197 519 87 220 182 314 368 60 304 415 154 178 1 100 481 241 49 236 486 560 480 239 205 120 141 554 247 233 556 294 173 237 280 301 56 409 85 464 136 113 51 289 414 487 42 403 508 553 142 369 361 95 155 370 396 119 564 470 525 367 354 102 110 313 436 306 25 219 405 502 341 342 50 164 421 273 416 91 248 482 417 262 475 96 192 128 319 427 153 490 496 545 32 156 81 462 336 37 111 24 89 526 392 88 69 538 133 129 147 258 430 246 325 34 93 536 189 284 398 204 429 208 184 390 151 295 377 375 402 285 338 512 542 300 249 292 250 489 547 400 20 477 381 327 84 469 412 513 158 340 101 130 316 476 357 53 17 343 196 551 432 311 329 121 152 181 382 305 435 107 346 191 206 411 303 498 116 269 190 75 18 210 366 307 371 4 253 331 522 534 183 543 565 82 266 559 171 459 317 123 73 387 5 277 240 27 321 103 532 326 454 501 453 122 257 485 31 59 451 270 491 48 68 324 351 43 507 72 105 428 493 463 145 64 134 104 16 15 223 187 479 135 450 527 175 35 78 118 167 97 225 533 195 423 108 444 216 193 318 291 268 150 345 296 3 561 567 260 166
