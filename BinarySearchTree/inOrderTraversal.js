// Problem Description
// Given a binary tree, return the inorder traversal of its nodes' values.

// Problem Constraints
// 1 <= number of nodes <= 105

// Input Format
// First and only argument is root node of the binary tree, A.

// Output Format
// Return an integer array denoting the inorder traversal of the given binary tree.

// Example Input
// Input 1:

//    1
//     \
//      2
//     /
//    3
// Input 2:

//    1
//   / \
//  6   2
//     /
//    3

// Example Output
// Output 1:

//  [1, 3, 2]
// Output 2:

//  [6, 1, 3, 2]

// Example Explanation
// Explanation 1:

//  The Inorder Traversal of the given tree is [1, 3, 2].
// Explanation 2:

//  The Inorder Traversal of the given tree is [6, 1, 3, 2].

import BinarySearchTree from './BST.js';

const bst = new BinarySearchTree();
// const nodes = [
//   129, 97, 98, 93, 106, 27, 61, -1, 173, 40, 78, 22, 152, 99, 114, 47, 69, -1,
//   -1, 110, 144, 14, 56, 165, 174, 49, 1, 57, 126, 123, 100, 30, -1, -1, -1, 161,
//   13, 139, 2, 85, 128, 119, 177, -1, 169, 135, 77, 112, 50, 17, 140, 138, 58,
//   -1, -1, 105, -1, -1, -1, -1, 70, -1, -1, 102, -1, -1, 103, -1, 176, -1, -1,
//   115, 132, 154, 125, 5, -1, 108, 36, 32, 7, -1, -1, 148, -1, 153, 16, 130, 72,
//   -1, -1, 95, 116, 48, 104, -1, -1, 20, 156, -1, -1, 88, -1, 142, 175, -1, 64,
//   133, 83, 94, -1, 4, 71, 101, -1, -1, -1, -1, 42, -1, -1, -1, -1, 134, 166, 28,
//   92, 33, 82, 74, 45, -1, -1, 168, -1, 9, -1, 44, 26, -1, -1, 170, 6, -1, -1,
//   89, 143, 160, -1, 68, 178, 111, 167, -1, 109, 151, -1, -1, -1, 81, 23, -1, -1,
//   -1, -1, -1, -1, 66, 11, 10, 179, 15, 96, -1, 127, 18, 163, -1, -1, 24, 29, -1,
//   -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 21, 118,
//   -1, 31, -1, 35, -1, 37, -1, 122, 162, 3, -1, -1, -1, 121, 59, -1, -1, -1, 19,
//   158, 157, -1, 171, 84, 46, 149, -1, -1, -1, -1, 76, 147, 54, 150, -1, -1, -1,
//   -1, 63, 62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 86, 43, 55, -1, -1, -1,
//   -1, 172, 120, -1, -1, 91, 155, 8, 107, -1, -1, -1, 164, -1, -1, 113, -1, 73,
//   137, -1, -1, 39, -1, -1, 41, -1, -1, -1, 75, 146, -1, -1, -1, -1, -1, -1, -1,
//   -1, -1, -1, -1, -1, -1, 90, -1, 145, -1, -1, 117, 51, -1, -1, 136, -1, 79, 80,
//   -1, 53, 52, -1, -1, -1, 159, -1, -1, -1, 60, -1, -1, -1, 131, -1, 38, 12, -1,
//   -1, -1, -1, 124, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, 65, -1, 87,
//   -1, 25, -1, 141, -1, -1, -1, -1,
// ];

const nodes = [
  166, 414, 260, 256, 289, 403, 567, 337, 146, 281, 51, -1, 42, 35, 561, 137,
  12, 348, 468, 19, 242, 52, 113, 487, -1, 428, 175, 118, 3, 13, 535, 259, 437,
  563, 389, 500, -1, 38, 8, 207, 221, 265, 238, 205, 136, -1, -1, 89, 105, 145,
  527, -1, 78, 225, 296, 286, 494, 47, 385, 558, 380, 488, 62, -1, 148, 198,
  484, -1, -1, 98, 165, -1, 174, 45, -1, -1, 333, 80, 287, -1, 21, 520, 239,
  294, 464, 95, 24, 435, 72, 463, -1, 134, 450, -1, -1, 97, -1, 291, 345, 445,
  30, 550, 537, 413, -1, 379, 185, 279, 276, 109, 224, 201, -1, 58, 410, -1, -1,
  -1, -1, 309, -1, 39, 442, 497, 2, -1, -1, -1, -1, 315, -1, 231, 28, 7, 424,
  401, -1, -1, -1, 549, 480, -1, 556, 85, -1, 369, 361, 475, 111, 390, 305, 321,
  507, -1, 493, -1, 64, 16, 135, 167, -1, 444, 318, 150, -1, 179, 350, 212, 529,
  176, 261, 504, -1, -1, -1, 384, -1, 297, 124, -1, -1, 275, 271, 202, -1, 509,
  439, -1, -1, 443, 499, -1, -1, -1, -1, 359, 448, 293, 466, 438, 180, 447, -1,
  157, 323, 67, 243, 478, 555, -1, 22, -1, 160, -1, -1, 530, 420, -1, 560, 247,
  233, -1, 409, 142, -1, -1, -1, 50, 262, 96, 37, 88, 184, 329, 382, 5, 27, 31,
  43, -1, -1, -1, -1, -1, 104, 15, 479, -1, -1, 533, 108, 216, 193, -1, 268,
  188, 431, 299, 546, -1, -1, 274, 395, 458, 11, 139, -1, 517, -1, -1, 474, 177,
  483, 194, 473, 393, 112, 441, 140, 523, -1, -1, 524, 460, 302, -1, 23, -1,
  521, 235, 63, 6, 232, 356, 552, -1, 214, 404, 376, 426, 308, -1, -1, -1, 332,
  -1, -1, -1, -1, -1, -1, -1, -1, 54, 457, -1, -1, -1, -1, 391, 282, 161, 394,
  406, 486, 141, 554, -1, -1, 237, 56, -1, 553, 502, 342, 273, 417, -1, -1, 462,
  336, 526, 392, 325, 208, 158, 311, 152, 181, 534, 387, 277, 240, -1, 485, 48,
  351, -1, -1, -1, -1, 223, 187, -1, -1, 195, 423, -1, -1, -1, -1, -1, -1, 557,
  440, 446, -1, 365, 518, 66, 172, -1, 378, 200, 228, -1, 90, -1, 163, -1, -1,
  -1, -1, -1, -1, 46, 117, 449, 26, 399, 255, 126, 566, -1, 358, -1, -1, -1, -1,
  397, 83, -1, -1, -1, 283, -1, -1, 452, -1, -1, 344, -1, -1, -1, 322, 263, 383,
  290, -1, 70, -1, 419, 218, -1, -1, 418, -1, -1, 132, -1, -1, 222, 386, -1,
  149, -1, -1, -1, -1, -1, 230, 71, 203, 541, 61, 57, 374, 213, 388, 467, 41,
  87, 236, -1, 120, -1, -1, 173, -1, 301, -1, 508, -1, 25, 405, -1, 341, 164,
  421, 416, 482, -1, 81, -1, -1, -1, -1, -1, -1, 258, 246, 93, 429, 327, 513,
  316, 432, 121, -1, -1, -1, 116, 522, 559, 73, -1, -1, -1, -1, -1, 257, -1,
  491, -1, 324, -1, -1, -1, -1, -1, -1, -1, -1, 65, -1, -1, -1, 528, -1, -1, -1,
  349, -1, -1, 495, 76, 125, 254, -1, 312, 245, -1, 40, 168, 159, 138, 408, 162,
  505, 425, 503, 169, 55, 471, -1, -1, -1, -1, -1, -1, 562, 288, 86, -1, -1, -1,
  -1, -1, 79, 186, -1, -1, -1, -1, -1, -1, 272, 540, -1, -1, -1, 94, -1, -1, 99,
  -1, 244, -1, -1, 170, -1, 510, -1, -1, -1, -1, -1, -1, 267, -1, -1, -1, -1,
  -1, -1, 407, 531, 74, -1, 434, 264, 330, 215, -1, -1, 353, -1, 515, 106, -1,
  310, -1, 519, 368, 49, -1, -1, -1, -1, 280, -1, -1, -1, 525, 306, -1, 219, -1,
  -1, -1, -1, -1, -1, -1, -1, 248, -1, 192, 156, 133, 147, 430, -1, 34, -1, -1,
  204, 300, 381, 84, 412, 340, 130, -1, 551, -1, -1, 206, 498, 366, 331, -1,
  266, 459, 123, 326, 122, 270, -1, -1, 68, 251, -1, 115, 506, -1, -1, -1, -1,
  -1, 422, -1, -1, -1, -1, 339, 539, -1, -1, -1, -1, 209, 372, 511, 347, -1,
  455, 77, 544, -1, -1, -1, 328, -1, -1, -1, -1, 131, -1, 226, -1, -1, -1, -1,
  -1, -1, 363, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1,
  -1, -1, -1, 364, -1, -1, -1, -1, 211, -1, -1, -1, 461, 252, -1, 227, -1, -1,
  199, -1, 334, 234, -1, -1, -1, 33, -1, -1, 514, 197, 220, 314, 60, 241, -1,
  -1, 119, 470, 436, -1, -1, -1, 91, -1, -1, -1, 128, 32, -1, 538, 129, -1, -1,
  -1, -1, -1, 284, 398, 151, 542, 20, 477, -1, -1, 469, -1, -1, -1, 101, -1, 17,
  196, -1, 191, -1, 303, 210, -1, 371, 253, 82, -1, -1, 171, 317, -1, 532, -1,
  -1, 453, -1, 451, -1, -1, -1, -1, -1, -1, -1, -1, -1, 320, 229, -1, 298, -1,
  -1, -1, -1, 492, -1, -1, 92, -1, -1, 114, -1, -1, 360, -1, -1, 465, 433, -1,
  -1, -1, -1, 352, -1, -1, -1, -1, 127, -1, 355, 373, -1, 36, 472, -1, -1, -1,
  456, -1, -1, 10, -1, -1, -1, 516, -1, -1, -1, -1, -1, 182, -1, -1, 100, 481,
  370, 396, 564, -1, -1, 313, -1, -1, -1, -1, 545, -1, -1, 69, -1, -1, -1, 189,
  -1, -1, -1, -1, 512, -1, 400, -1, -1, -1, -1, -1, -1, -1, 53, -1, 343, -1, -1,
  346, 411, -1, 190, 18, 307, -1, 4, -1, 543, 565, -1, -1, -1, -1, 103, -1, 501,
  -1, 59, -1, -1, -1, 29, -1, 9, -1, -1, -1, -1, 44, -1, -1, 335, -1, -1, -1,
  -1, 278, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 217, 144, -1,
  -1, -1, -1, 1, -1, -1, -1, 155, -1, -1, -1, -1, -1, 110, -1, -1, 496, -1, -1,
  536, -1, 402, 338, -1, 547, 357, -1, -1, -1, -1, 107, -1, -1, 269, -1, -1, 75,
  -1, -1, -1, -1, -1, 183, -1, -1, -1, -1, -1, 454, -1, -1, -1, -1, -1, -1, 362,
  -1, -1, -1, -1, -1, -1, 143, -1, 178, -1, -1, -1, 367, 102, 490, -1, -1, -1,
  377, 375, 285, -1, 249, 489, 476, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  -1, 548, -1, -1, 304, 154, -1, -1, 354, -1, 427, 153, -1, 295, -1, -1, -1, -1,
  -1, -1, -1, 250, -1, -1, -1, -1, -1, -1, 415, -1, -1, -1, 319, -1, -1, -1, -1,
  -1, 292, -1, -1, -1, -1, -1, -1, -1,
];

for (const value of nodes) {
  if (value !== -1) {
    bst.insert(value);
  }
}

const inorderTraversal = function (A) {
  // LNR
  // let stack = [A];
  // let res = new Array(Math.pow(10, 4));
  // let j = 0;
  // while (stack.length > 0) {
  //   const node = stack.pop();
  //   if (node.right) {
  //     stack.push(node.right);
  //   }
  //   stack.push(node);
  //   if (node.left) {
  //     stack.push(node.left);
  //   } else if (!node.left) {
  //     res[j] = stack.pop().data;
  //     j++;
  //   }
  //   if (!node.right) {
  //     res[j] = stack.pop().data;
  //     j++;
  //   }
  // }
  // return res;

  // above solution is cusing time exceed error

  if (!A) {
    return [];
  }
  const arrI = [];
  const stack = [];
  let curr = A;
  while (curr || stack.length > 0) {
    while (curr) {
      stack.push(curr);
      curr = curr.left;
    }
    curr = stack.pop();
    arrI.push(curr.data);
    curr = curr.right;
  }
  return arrI;
};

console.log(inorderTraversal(bst.root));
